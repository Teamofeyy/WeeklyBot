import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_ORG = os.getenv("GITHUB_ORG")
GITHUB_PROJECT_NUMBER = int(os.getenv("GITHUB_PROJECT_NUMBER"))
GITHUB_API_URL = os.getenv("GITHUB_API_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏–∑ GitHub Project
def get_github_issues():
    query = """
    query GetProjectItems {
      organization(login: "teamofeydev") {
        projectV2(number: 1) {
          items(first: 20) {
            nodes {
              content {
                ... on Issue {
                  title
                  url
                  body
                  state
                  createdAt
                }
              }
              fieldValues(first: 10) {
                nodes {
                  ... on ProjectV2ItemFieldSingleSelectValue {
                    field {
                      ... on ProjectV2FieldCommon {
                        name
                      }
                    }
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
    """
    headers = {"Authorization": f"Bearer {GITHUB_TOKEN}"}
    response = requests.post(GITHUB_API_URL, json={"query": query}, headers=headers)
    data = response.json()

    if "errors" in data:
        raise Exception(f"GraphQL errors: {data['errors']}")

    issues = []
    for node in data["data"]["organization"]["projectV2"]["items"]["nodes"]:
        content = node["content"]
        field_values = node.get("fieldValues", {}).get("nodes", [])
        status = "–ù–µ —É–∫–∞–∑–∞–Ω"
        for field in field_values:
            if field.get("field", {}).get("name") == "Status":
                status = field.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω")
                break

        issues.append({
            "title": content["title"],
            "url": content["url"],
            "body": content.get("body", ""),
            "state": content["state"],
            "status": status,  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
            "createdAt": content["createdAt"]
        })

    return issues


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π
def create_status_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏", callback_data="get_issues")]
        ]
    )
    return keyboard


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–ü–æ–∫–∞! –Ø –º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ GitHub Projects.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.",
        reply_markup=create_status_keyboard()
    )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "get_issues":
        await callback_query.answer("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ GitHub...")

        try:
            issues = get_github_issues()
            if not issues:
                await callback_query.message.answer("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            formatted_issues = "\n\n".join(
                f"üìä–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n"
                f"**{issue['title']}**\n"
                f" -–û–ø–∏—Å–∞–Ω–∏–µ: {issue['body']}\n"
                f" -–°–æ—Å—Ç–æ—è–Ω–∏–µ: {issue['state']}\n"
                f" -–°—Ç–∞—Ç—É—Å: {issue['status']}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                f" -[–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É]({issue['url']})\n"
                f"–°–æ–∑–¥–∞–Ω–∞: {issue['createdAt']}\n"
                for issue in issues
            )

            await callback_query.message.answer(formatted_issues, parse_mode="Markdown")

        except Exception as e:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())