import pytest
from unittest.mock import AsyncMock, patch
from aiogram.types import Message, CallbackQuery
from handlers import start, process_callback


@patch.dict('os.environ', {
    'GITHUB_TOKEN': 'test-token',
    'GITHUB_API_URL': 'https://api.github.com',
    'GITHUB_ORG': 'test-org',
    'GITHUB_PROJECT_NUMBER': '1',
})

@pytest.mark.asyncio
async def test_start_command(mocker):
    # –ú–æ–∫–∞–µ–º Message –æ–±—ä–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é AsyncMock
    mock_message = AsyncMock(spec=Message)
    mock_message.answer = AsyncMock()  # Ensure answer is an AsyncMock

    # –í—ã–∑—ã–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
    await start(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    mock_message.answer.assert_called_once_with(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ GitHub Projects.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.",
        reply_markup=mocker.ANY  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )


@pytest.mark.asyncio
async def test_process_callback(mocker):
    # Mock CallbackQuery object with AsyncMock
    mock_callback_query = AsyncMock(spec=CallbackQuery)
    mock_callback_query.answer = AsyncMock()
    mock_callback_query.message = AsyncMock()
    mock_callback_query.message.answer = AsyncMock()

    # Set the callback query data
    mock_callback_query.data = "get_issues"

    # Mock get_github_issues function
    mock_get_issues = mocker.patch(
        "handlers.get_github_issues",
        return_value=[
            {
                "title": "Test Issue",
                "url": "http://example.com",
                "body": "Test Body",
                "state": "OPEN",
                "status": "In Progress",
                "createdAt": "2024-11-25",
            }
        ],  # Ensure it directly returns the list, not a coroutine
    )

    # Call the handler
    await process_callback(mock_callback_query)

    # Assert message.answer was called with the correct formatted text
    mock_callback_query.message.answer.assert_called_once_with(
        "üìä–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n"
        "**Test Issue**\n"
        " -–û–ø–∏—Å–∞–Ω–∏–µ: Test Body\n"
        " -–°–æ—Å—Ç–æ—è–Ω–∏–µ: OPEN\n"
        " -–°—Ç–∞—Ç—É—Å: In Progress\n"
        " -[–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É](http://example.com)\n"
        "–°–æ–∑–¥–∞–Ω–∞: 2024-11-25\n",
        parse_mode="Markdown",
    )

    # Assert get_github_issues was called once
    mock_get_issues.assert_called_once()
